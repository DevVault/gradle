/*
 * Copyright 2023 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.gradle.smoketests

import org.gradle.util.GradleVersion

import java.nio.file.Files

import static org.gradle.testkit.runner.TaskOutcome.SUCCESS

/**
 * Smoke test for the BND plugin.
 *
 * The BND plugin extends the normal java plugin by:
 * <ul>
 * <li>Extending the jar task by adding a bundle extension. The jar task actions are also extended to use Bnd to generate a bundle. The bundle will contain all the content
 * configured into the jar task plus whatever additional content is included via the Bnd instructions. The bndfile property of the task's bundle extension is set
 * to {@code file("bnd.bnd")} if a {@code bnd.bnd} file exists in the project folder.</li>
 * <li>Adds a {@code baseline} configuration.</li>
 * <li>Adds a {@code baseline} task of type Baseline which baselines the bundle generated by the jar task against the prior version of that bundle in the repositories.</li>
 * </ul>
 */
class BNDSmokeTest extends AbstractPluginValidatingSmokeTest {
    def "builds using BND and correctly writes direct external dependency versions to the manifest"() {
        given:
        def commonsVersionRange = "[3.12,4)"
        settingsFile << """
pluginManagement {
    plugins {
        id "biz.aQute.bnd.builder" version "${TestedVersions.bnd}"
    }
}
"""
        buildFile << """
plugins {
    id "biz.aQute.bnd.builder"
}

${mavenCentralRepository()}

dependencies {
    implementation "org.apache.commons:commons-lang3:$commonsVersionRange"
}

tasks.named("jar") {
    bundle {
        // Make this work with CC
        properties.empty()

        bnd('-exportcontents': 'com.example.*',
            '-sources': 'true',
            'Import-Package': 'org.apache.*')
    }
}

tasks.register("unpackManifest", Copy) {
    from(zipTree(jar.archiveFile)) {
        include("META-INF/MANIFEST.MF")
    }
    into(layout.buildDirectory.dir("unpacked"))
}
"""

        file("src/main/java/com/example/Example.java") << """
package com.example;

import org.apache.commons.lang3.StringUtils;

public class Example {
    public boolean testIsEmpty(String someString) {
        return StringUtils.isEmpty(someString);
    }
}
"""

        when:
        def result = runner("unpackManifest")
            .forwardOutput()
            .expectLegacyDeprecationWarning("The AbstractTask.getConvention() method has been deprecated. " +
                "This is scheduled to be removed in Gradle 9.0. " +
                "Consult the upgrading guide for further information: " +
                "https://docs.gradle.org/${GradleVersion.current().version}/userguide/upgrading_version_8.html#deprecated_access_to_conventions")
            .run()

        then: "the build succeeds"
        result.task(":unpackManifest").outcome == SUCCESS

        and: "version numbers exist in the unpacked manifest file"
        def unpackedManifest = file("build/unpacked/META-INF/MANIFEST.MF")
        def lines = Files.readAllLines(unpackedManifest.toPath())
        assert lines.stream().anyMatch { it == "Import-Package: org.apache.commons.lang3;version=\"$commonsVersionRange\"" }
    }

    def "builds using BND and correctly write transitive external dependency of a direct project dependency versions to the manifest"() {
        given:
        def commonsVersionRange = "[3.12,4)"
        def directVersion = "2.7"
        settingsFile << """
pluginManagement {
    plugins {
        id "biz.aQute.bnd.builder" version "${TestedVersions.bnd}"
    }
}

include "direct"
"""
        buildFile << """
plugins {
    id "biz.aQute.bnd.builder"
}

${mavenCentralRepository()}

dependencies {
    implementation project(":direct")
}

tasks.named("jar") {
    bundle {
        // Make this work with CC
        properties.empty()

        bnd('-exportcontents': 'com.example.*',
            '-sources': 'true',
            'Import-Package': 'com.example.util.*;version="${directVersion}"')
    }
}

tasks.register("unpackManifest", Copy) {
    from(zipTree(jar.archiveFile)) {
        include("META-INF/MANIFEST.MF")
    }
    into(layout.buildDirectory.dir("unpacked"))
}
"""

        file("src/main/java/com/example/Example.java") << """
package com.example;

import com.example.util.MyUtil;

public class Example {
    public boolean testIsEmpty(String someString) {
        return MyUtil.myIsEmpty(someString);
    }
}
"""

        and:
        file("direct/build.gradle") << """
plugins {
    id "java-library"
}

group = "com.example.direct"
version = "$directVersion"

${mavenCentralRepository()}

dependencies {
    api "org.apache.commons:commons-lang3:$commonsVersionRange"
    api "com.google.guava:guava:30.1.1-jre"
}
"""

        file("direct/src/main/java/com/example/util/MyUtil.java") << """
package com.example.util;

import org.apache.commons.lang3.StringUtils;

public class MyUtil {
    public static boolean myIsEmpty(String someString) {
        return StringUtils.isEmpty(someString);
    }
}
"""

        when:
        def result = runner("unpackManifest")
            .forwardOutput()
            .expectLegacyDeprecationWarning("The AbstractTask.getConvention() method has been deprecated. " +
                "This is scheduled to be removed in Gradle 9.0. " +
                "Consult the upgrading guide for further information: " +
                "https://docs.gradle.org/${GradleVersion.current().version}/userguide/upgrading_version_8.html#deprecated_access_to_conventions")
            .run()

        then: "the build succeeds"
        result.task(":unpackManifest").outcome == SUCCESS

        and: "version numbers exist in the unpacked manifest file"
        def unpackedManifest = file("build/unpacked/META-INF/MANIFEST.MF")
        def lines = Files.readAllLines(unpackedManifest.toPath())
        assert lines.stream().anyMatch { it == "Import-Package: com.example.util;version=\"${directVersion}\"" }
    }

    @Override
    Map<String, Versions> getPluginsToValidate() {
        [
            'biz.aQute.bnd.builder': Versions.of(TestedVersions.bnd),
        ]
    }
}
